<?php
namespace Helloworld {
  // this would be generated by protoc extension we would write
  // would be part of namespace helloworld (or maybe Helloworld\Server?)

  interface GreeterServerInterface {
    public function SayHello(\Helloworld\HelloRequest $arg): \Helloworld\HelloReply;
  }

  class GreeterServer {
    private $mapping = [];
    private $name = '';

    function __construct() {
      $this->name = "helloworld.Greeter";
    }

    // generate for each type
    private function decodeHelloRequest($raw): \Helloworld\HelloRequest {
      $obj= new \Helloworld\HelloRequest();
      $obj->decode($raw);
      return $obj;
    }

    // generate for each rpc method. server handles errors.
    // returns encoded object
    private function handleSayHello($obj, $raw) {
      $request = $this->decodeHelloRequest($raw);
      $response = call_user_func(array($obj, "SayHello"), $request);
      //var_dump($response);
      return $response->encode();
    }

    // this sets up the mappings, etc.
    public function RegisterGreeterServer(\GRPCServer $server, \Helloworld\GreeterServerInterface $obj) {
      $this->mapping = array(
        "SayHello" => function ($raw) use($obj) {
          return $this->handleSayHello($obj, $raw);
        }
      );
      $server->RegisterServer($this->name, $this->mapping);
    }
  }
}
?>
